plugins {
    id 'java'
    id 'maven'
    id 'signing'
}

archivesBaseName = "Harrow"
group GROUP
version = VERSION_NAME

repositories {
    mavenCentral()
    maven {url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'}
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.1-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:15.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (isReleaseBuild()) {
                repository(url: RELEASE_REPOSITORY_URL) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            } else {
                snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            pom.project {
                name 'Harrow'
                packaging 'jar'
                description 'Library containing tools that can be used for spigot plugins development.'
                url 'https://github.com/Liinx/Harrow'

                scm {
                    connection scm_connection
                    developerConnection scm_developerConnection
                    url scm_url
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/Liinx/Harrow/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'Lynx'
                        name NAME
                        email EMAIL
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}